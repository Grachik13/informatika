from PyQt5.QtWidgets import (
    QApplication,
    QLabel,
    QLineEdit,
    QMainWindow,
    QPushButton,
    QVBoxLayout,
    QWidget,
)

import numpy as np

import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

class MainWindow(QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        # Назначим заголовок окна
        self.setWindowTitle("График")


        # Создание виджетов
        self.canvas = FigureCanvas(plt.figure()) # Создание полотна

        self.plot_button = QPushButton("Нарисовать график")
        self.plot_button.clicked.connect(self.plot_data)

        self.range_label = QLabel("Диапазон")
        self.range_start_input = QLineEdit('0')
        self.range_end_input = QLineEdit('1')

        self.function_label = QLabel("Функция:")
        self.function_input = QLineEdit('x ** 3')


        # Создание центрального виджета
        central_widget = QWidget()
        layout = QVBoxLayout() # Макет, на который будут добавлятся виджеты
        central_widget.setLayout(layout) # Добавление макета на центральный виджет


        # Добавление виджетов на макет
        layout.addWidget(self.canvas)

        layout.addWidget(self.plot_button)

        layout.addWidget(self.range_label)
        layout.addWidget(self.range_start_input)
        layout.addWidget(self.range_end_input)

        layout.addWidget(self.function_label)
        layout.addWidget(self.function_input)


        # Установка центрального виджета
        self.setCentralWidget(central_widget)


        # Вызов функции рисования графика
        # self.plot_data()

    def plot_data(self):
        try:
            range_start = float(self.range_start_input.text())
            range_end = float(self.range_end_input.text())
        except ValueError:
            range_start = 0
            range_end = 1
        # try:
        #     expression = self.function_input.text()
        # except ValueError:
        #     expression = "x ** 3"

        functions = {} # Определим словарь функций
        exec(f"def f(x): return {expression}", functions)
        function = functions ["f"]


        x = np.linspace(range_start, range_end, 50)

        function = lambda x: x ** 3

        y = [function(value) for value in x]

        plt.plot(x, y)
        plt.grid(True)

        plt.xlabel('x')
        plt.ylabel('y')

        plt.title('Заголовок график' + expression)


        # Обновление виджета №0 (виджет с полотном Matplotlib)
        self.centralWidget().layout().itemAt(0).widget().draw()


# Создать приложение QApplication
app = QApplication([])

# Создать окно приложения
main_window = MainWindow()
main_window.show()

# Запустить приложение
app.exec_()
__________________________________________________________________




from tkinter import Tk

window = Tk()
window.title("Определение попадания точки в область")


from tkinter import Canvas

canvas = Canvas(window, width = 500, height = 500)


def check_point(x, y):
    # Очищаем предыдущие контуры, если они есть
    canvas.deleted("contour")

    # Рисуем контуры фигуры
    canvas.create_line(100, 100, 200, 100, fill="red", width=2, tages="contour")
    canvas.create_line(200, 100, 200, 200, fill="red", width=2, tages="contour")
    canvas.create_line(200, 200, 100, 200, fill="red", width=2, tages="contour")
    canvas.create_line(100, 200, 100, 100, fill="red", width=2, tages="contour")

    check_point(x, y)

def check_point(x, y):
    # код для определения попадания точки в область

    pass


def check_button_clicked():
    x = float(x_entry.get())
    y = float(y_entry.get())
    if check_point(x, y):
        result_label.config(text="Точка попадает в область", fg="green")
    else:
        result_label.config(text="Точка не попадает в область", fg="red")


from tkinter import Entry, Button, Label

x_label = Label (window, text="X:")
x_label.pack()
x_entry = Entry(window)
x_entry.pack()

y_label = Label (window, text="Y:")
y_label.pack()
y_entry = Entry(window)
y_entry.pack()

check_button = Button(window, text="Проверить", command = check_button_clicked)
check_button.pack()

result_label = Label(window, text="")
result_label.pack()

window.mainloop()



